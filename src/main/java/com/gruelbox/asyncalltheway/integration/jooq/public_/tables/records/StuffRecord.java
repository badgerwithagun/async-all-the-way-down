/*
 * This file is generated by jOOQ.
 */
package com.gruelbox.asyncalltheway.integration.jooq.public_.tables.records;


import com.gruelbox.asyncalltheway.integration.jooq.public_.tables.Stuff;
import com.gruelbox.asyncalltheway.integration.jooq.public_.tables.interfaces.IStuff;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StuffRecord extends UpdatableRecordImpl<StuffRecord> implements VertxPojo, Record3<String, String, Long>, IStuff {

    private static final long serialVersionUID = -1896519793;

    /**
     * Setter for <code>public.STUFF.ID</code>.
     */
    @Override
    public StuffRecord setId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.STUFF.ID</code>.
     */
    @Override
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.STUFF.DATA</code>.
     */
    @Override
    public StuffRecord setData(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.STUFF.DATA</code>.
     */
    @Override
    public String getData() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.STUFF.VERSION</code>.
     */
    @Override
    public StuffRecord setVersion(Long value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.STUFF.VERSION</code>.
     */
    @Override
    public Long getVersion() {
        return (Long) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, Long> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Stuff.STUFF.ID;
    }

    @Override
    public Field<String> field2() {
        return Stuff.STUFF.DATA;
    }

    @Override
    public Field<Long> field3() {
        return Stuff.STUFF.VERSION;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getData();
    }

    @Override
    public Long component3() {
        return getVersion();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getData();
    }

    @Override
    public Long value3() {
        return getVersion();
    }

    @Override
    public StuffRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public StuffRecord value2(String value) {
        setData(value);
        return this;
    }

    @Override
    public StuffRecord value3(Long value) {
        setVersion(value);
        return this;
    }

    @Override
    public StuffRecord values(String value1, String value2, Long value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IStuff from) {
        setId(from.getId());
        setData(from.getData());
        setVersion(from.getVersion());
    }

    @Override
    public <E extends IStuff> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StuffRecord
     */
    public StuffRecord() {
        super(Stuff.STUFF);
    }

    /**
     * Create a detached, initialised StuffRecord
     */
    public StuffRecord(String id, String data, Long version) {
        super(Stuff.STUFF);

        set(0, id);
        set(1, data);
        set(2, version);
    }

    public StuffRecord(io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }
}
